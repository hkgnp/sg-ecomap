"use strict";var __assign=this&&this.__assign||function(){return(__assign=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var a in r=arguments[t])Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a]);return e}).apply(this,arguments)},__rest=this&&this.__rest||function(e,r){var t={};for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&r.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var n=0,a=Object.getOwnPropertySymbols(e);n<a.length;n++)r.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(t[a[n]]=e[a[n]]);return t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}},core_1=(Object.defineProperty(exports,"__esModule",{value:!0}),require("@react-leaflet/core")),leaflet_1=__importDefault(require("leaflet"));function getPropsAndEvents(e){var n={},a={},e=(e.children,__rest(e,["children"]));return Object.entries(e).forEach(function(e){var r,t=e[0],e=e[1];t.startsWith("on")?a=__assign(__assign({},a),((r={})[t]=e,r)):n=__assign(__assign({},n),((r={})[t]=e,r))}),{clusterProps:n,clusterEvents:a}}function createMarkerClusterGroup(e,r){var e=getPropsAndEvents(e),t=e.clusterProps,e=e.clusterEvents,n=new leaflet_1.default.MarkerClusterGroup(t);return Object.entries(e).forEach(function(e){var r=e[0],e=e[1],r="cluster".concat(r.substring(2).toLowerCase());n.on(r,e)}),(0,core_1.createElementObject)(n,(0,core_1.extendContext)(r,{layerContainer:n}))}require("leaflet.markercluster"),delete leaflet_1.default.Icon.Default.prototype._getIconUrl,leaflet_1.default.Icon.Default.mergeOptions({iconRetinaUrl:require("./assets/marker-icon-2x.png").default,iconUrl:require("./assets/marker-icon.png").default,shadowUrl:require("./assets/marker-shadow.png").default});var updateMarkerCluster=function(e,r,t){},MarkerClusterGroup=(0,core_1.createPathComponent)(createMarkerClusterGroup,updateMarkerCluster);exports.default=MarkerClusterGroup;